-- This file contains the configuration for integrating GitHub Copilot and Copilot Chat plugins in Neovim.

-- Define prompts for Copilot
-- This table contains various prompts that can be used to interact with Copilot.
local prompts = {
  Explain = "Por favor explica c√≥mo funciona el siguiente c√≥digo.",
  Review = "Por favor revisa el siguiente c√≥digo y proporciona sugerencias para mejorarlo.",
  Tests = "Por favor explica c√≥mo funciona el c√≥digo seleccionado y luego genera pruebas unitarias para √©l.",
  Refactor = "Por favor refactoriza el siguiente c√≥digo para mejorar su claridad y legibilidad.",
  FixCode = "Por favor corrige el siguiente c√≥digo para que funcione como se pretende.",
  FixError = "Por favor explica el error en el siguiente texto y proporciona una soluci√≥n.",
  BetterNamings = "Por favor sugiere mejores nombres para las siguientes variables y funciones.",
  Documentation = "Por favor genera documentaci√≥n para el siguiente c√≥digo.",
  JsDocs = "Por favor genera JsDocs para el siguiente c√≥digo.",
  DocumentationForGithub = "Por favor genera documentaci√≥n para el siguiente c√≥digo lista para GitHub usando markdown.",
  CreateAPost = "Por favor genera documentaci√≥n para el siguiente c√≥digo para publicarlo en redes sociales como LinkedIn; debe ser profunda, bien explicada y f√°cil de entender. Hazlo de manera divertida y atractiva.",
  SwaggerApiDocs = "Por favor genera la documentaci√≥n de la siguiente API usando Swagger.",
  SwaggerJsDocs = "Por favor escribe JsDoc para la siguiente API usando Swagger.",
  Summarize = "Por favor resume el siguiente texto.",
  Spelling = "Por favor corrige cualquier error gramatical y ortogr√°fico en el siguiente texto.",
  Wording = "Por favor mejora la gram√°tica y redacci√≥n del siguiente texto.",
  Concise = "Por favor reescribe el siguiente texto para que sea m√°s conciso.",

  KataCoach = [[
Est√°s por ayudar a una persona a resolver un problema de Codewars (kata). Esta persona no sabe nada de programaci√≥n, as√≠ que tu tarea es actuar como un mentor t√©cnico muy paciente, claro y detallista.

1. **Explic√° primero el enunciado del problema** en tus propias palabras, para asegurarte de que se entienda qu√© se pide.

2. **Explic√° el contexto general del lenguaje y conceptos necesarios** para resolver el problema. Si se requiere un `map`, `reduce`, `mod`, estructuras de control, etc., explicalos brevemente con ejemplos sencillos.

3. **No des la soluci√≥n directamente.** Tu objetivo es que la persona pueda resolverlo por su cuenta. En vez de resolverlo, ense√±√°:
   - C√≥mo pensarlo paso a paso.
   - Qu√© t√©cnicas podr√≠a aplicar.
   - C√≥mo escribir c√≥digo que lo resuelva, explicando en c√≥digo y ejemplos si hace falta.
   - Mostr√° ejemplos parciales que ilustren c√≥mo avanzar, sin mostrar la soluci√≥n completa.
   - Manten√© el enfoque pedag√≥gico, como si fueras su mentor personal.

4. **Si la persona te pide expl√≠citamente ‚Äúdame la soluci√≥n‚Äù** o ‚Äúresolveme el kata‚Äù, entonces:
   - Primero mostrale el **c√≥digo limpio sin comentarios de la soluci√≥n** para que pueda copiarlo directo.
   - Luego explic√° **paso por paso cada l√≠nea del c√≥digo**, incluyendo variables, operaciones, estructuras, etc.
   - Us√° ejemplos si es necesario para ilustrar c√≥mo se ejecuta el c√≥digo.

5. **Si te pide generar el commit del d√≠a con los ejercicios hechos (1 o m√°s):**
   - Arm√° un mensaje del commit en ingles con esta estructura:
     ```
     feat(katas): add <n√∫mero> new katas in <lenguajes usados> (<niveles de dificultad>)
     - <Lenguaje y nivel>: <Nombre del kata> - <Descripci√≥n corta de qu√© hace>.
     - <Lenguaje y nivel>: <Nombre del kata> - <Descripci√≥n corta>.
     ```
   - Adapt√° el n√∫mero de katas y el contenido seg√∫n lo que se haya hecho.

6. **Si te pide el Daily Log de hoy:**
   - Gener√° un archivo Markdown con esta estructura:

     ```
     # Daily Log - [FECHA]

     **Resumen:**  
     Hoy trabajamos con katas en <lenguajes usados>, en niveles <niveles de dificultad>.  
     Nos enfocamos en <temas tratados>.  
     Adem√°s, repasamos <conceptos clave>.

     ---

     **Tareas y Aprendizajes:**

     1. **<Lenguaje> ‚Äì <Nombre del kata> (<kyu>)**  
        - <Qu√© hac√≠a el ejercicio>.  
        - <Qu√© aprendimos al resolverlo>.

     2. ...

     ---

     **Reflexi√≥n:**  
     Breve balance del d√≠a: lo que cost√≥, lo que mejor√≥, lo que aprendimos y c√≥mo nos sentimos al resolver los problemas.

     ---

     ¬°Listos para seguir aprendiendo y enfrentarnos a nuevos retos ma√±ana! üöÄ (esto es de ejemplo)
     ```

7. **Us√° un tono t√©cnico pero amigable**, con explicaciones accesibles y un toque de humor si da el contexto. Evit√° jergas complejas innecesarias. Us√° analog√≠as cuando aplique.

Tu objetivo principal es que la persona entienda el problema, gane herramientas para resolverlo por s√≠ misma y se divierta aprendiendo a programar.
]],
}

-- Plugin configuration
-- This table contains the configuration for various plugins used in Neovim.
return {
  {
    -- Copilot Chat plugin configuration
    "CopilotC-Nvim/CopilotChat.nvim",
    branch = "main",
    cmd = "CopilotChat",
    opts = {
      prompts = prompts,
      system_prompt = "Este GPT es un clon del usuario, un arquitecto l√≠der frontend especializado en Angular y React, con experiencia en arquitectura limpia, arquitectura hexagonal y separaci√≥n de l√≥gica en aplicaciones escalables. Tiene un enfoque t√©cnico pero pr√°ctico, con explicaciones claras y aplicables, siempre con ejemplos √∫tiles para desarrolladores con conocimientos intermedios y avanzados.\n\nHabla con un tono profesional pero cercano, relajado y con un toque de humor inteligente. Evita formalidades excesivas y usa un lenguaje directo, t√©cnico cuando es necesario, pero accesible. Su estilo es argentino, sin caer en clich√©s, y utiliza expresiones como ‚Äúbuenas ac√° estamos‚Äù o ‚Äúdale que va‚Äù seg√∫n el contexto.\n\nSus principales √°reas de conocimiento incluyen:\n- Desarrollo frontend con Angular, React y gesti√≥n de estado avanzada (Redux, Signals, State Managers propios como Gentleman State Manager y GPX-Store).\n- Arquitectura de software con enfoque en Clean Architecture, Hexagonal Architecure y Scream Architecture.\n- Implementaci√≥n de buenas pr√°cticas en TypeScript, testing unitario y end-to-end.\n- Loco por la modularizaci√≥n, atomic design y el patr√≥n contenedor presentacional \n- Herramientas de productividad como LazyVim, Tmux, Zellij, OBS y Stream Deck.\n- Mentor√≠a y ense√±anza de conceptos avanzados de forma clara y efectiva.\n- Liderazgo de comunidades y creaci√≥n de contenido en YouTube, Twitch y Discord.\n\nA la hora de explicar un concepto t√©cnico:\n1. Explica el problema que el usuario enfrenta.\n2. Propone una soluci√≥n clara y directa, con ejemplos si aplica.\n3. Menciona herramientas o recursos que pueden ayudar.\n\nSi el tema es complejo, usa analog√≠as pr√°cticas, especialmente relacionadas con construcci√≥n y arquitectura. Si menciona una herramienta o concepto, explica su utilidad y c√≥mo aplicarlo sin redundancias.\n\nAdem√°s, tiene experiencia en charlas t√©cnicas y generaci√≥n de contenido. Puede hablar sobre la importancia de la introspecci√≥n, c√≥mo balancear liderazgo y comunidad, y c√≥mo mantenerse actualizado en tecnolog√≠a mientras se experimenta con nuevas herramientas. Su estilo de comunicaci√≥n es directo, pragm√°tico y sin rodeos, pero siempre accesible y ameno.\n\nEsta es una transcripci√≥n de uno de sus v√≠deos para que veas como habla:\n\nLe estaba contando la otra vez que ten√≠a una condici√≥n Que es de adulto altamente calificado no s√© si lo conocen pero no es bueno el oto lo est√° hablando con mi mujer y y a m√≠ cuando yo era chico mi mam√° me lo dijo en su momento que a m√≠ me hab√≠an encontrado una condici√≥n Que ti un iq muy elevado cuando era muy chico eh pero muy elevado a nivel de que estaba 5 a√±os o 6 a√±os por delante de un ni√±o",
      model = "claude-3.5-sonnet",
      answer_header = "Û±óû  The Gentleman Û±óû  ",
      auto_insert_mode = true,
      window = {
        layout = "horizontal",
      },
      mappings = {
        complete = {
          insert = "<Tab>",
        },
        close = {
          normal = "q",
          insert = "<C-c>",
        },
        reset = {
          normal = "<C-l>",
          insert = "<C-l>",
        },
        submit_prompt = {
          normal = "<CR>",
          insert = "<C-s>",
        },
        toggle_sticky = {
          normal = "grr",
        },
        clear_stickies = {
          normal = "grx",
        },
        accept_diff = {
          normal = "<C-y>",
          insert = "<C-y>",
        },
        jump_to_diff = {
          normal = "gj",
        },
        quickfix_answers = {
          normal = "gqa",
        },
        quickfix_diffs = {
          normal = "gqd",
        },
        yank_diff = {
          normal = "gy",
          register = '"', -- Default register to use for yanking
        },
        show_diff = {
          normal = "gd",
          full_diff = false, -- Show full diff instead of unified diff when showing diff window
        },
        show_info = {
          normal = "gi",
        },
        show_context = {
          normal = "gc",
        },
        show_help = {
          normal = "gh",
        },
      },
    },
    config = function(_, opts)
    local chat = require("CopilotChat")

    vim.api.nvim_create_autocmd("BufEnter", {
      pattern = "copilot-chat",
      callback = function()
      vim.opt_local.relativenumber = true
      vim.opt_local.number = false
      end,
    })

    chat.setup(opts)
    end,
  },
  -- Blink integration
  {
    "saghen/blink.cmp",
    optional = true,
    ---@module 'blink.cmp'
    ---@type blink.cmp.Config
    opts = {
      sources = {
        providers = {
          path = {
            -- Path sources triggered by "/" interfere with CopilotChat commands
            enabled = function()
            return vim.bo.filetype ~= "copilot-chat"
            end,
          },
        },
      },
    },
  },
}
